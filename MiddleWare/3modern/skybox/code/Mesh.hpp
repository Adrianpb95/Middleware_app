/*
ADRIAN PONCE BALSEIRO
ESNE G4.3 DDVJ
adrianpb95@gmail.com
10 / 06 / 2018
*/


#ifndef MESH_HEADER
#define MESH_HEADER

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "Elements.hpp"
#include <memory>

////////////////////////////////////////////////////////////
// NameSpaces
////////////////////////////////////////////////////////////

namespace example
{
	class Mesh
	{
		////////////////////////////////////////////////////////////
		// Declaracion de variables			
		////////////////////////////////////////////////////////////
	private:

															///<CONJUNTO DE VALORES DE UNA MALLA 
		Vertex					positions;					///<Posiciones de los vertices de la malla
		Vertex					normals;					///<Normales de la malla	
		Vertex					colors;						///<Colores de la malla
		TextCoord				texture_uvs;				///<Coordenadas de textura de la malla
		Index					indices;					///<Indices de la malla
		int						number_of_indices;			///<Total de indices de la malla
		int						number_of_vertices;			///<Total de vertices de la malla



		////////////////////////////////////////////////////////////
		// Declaracion de funciones			
		////////////////////////////////////////////////////////////
	public:
		

		////////////////////////////////////////////////////////////
		/// \brief	Getter de poscion de vertices
		////////////////////////////////////////////////////////////
		Vertex			*get_positions()				{ return &positions; }

		////////////////////////////////////////////////////////////
		/// \brief	Getter de las normales
		////////////////////////////////////////////////////////////
		Vertex			*get_normals()					{ return &normals; }

		////////////////////////////////////////////////////////////
		/// \brief	Getter de los colores
		////////////////////////////////////////////////////////////
		Vertex			*get_colors()					{ return &colors; }

		////////////////////////////////////////////////////////////
		/// \brief	GETTER de las coordenas de textura
		////////////////////////////////////////////////////////////
		TextCoord		*get_texture_uvs()				{ return &texture_uvs; }

		////////////////////////////////////////////////////////////
		/// \brief	GETTER de los indices
		////////////////////////////////////////////////////////////
		Index			*get_indices()					{ return &indices; }

		////////////////////////////////////////////////////////////
		/// \brief	GETTER de una posicion determinada
		////////////////////////////////////////////////////////////
		Point3f			*get_position(size_t i)			{ return &positions[i]; }

		////////////////////////////////////////////////////////////
		/// \brief	GETTER de un color determinado
		////////////////////////////////////////////////////////////
		Point3f			*get_color(size_t i)			{ return &colors[i]; }

		////////////////////////////////////////////////////////////
		/// \brief	GETTER de un indice determinado
		////////////////////////////////////////////////////////////
		unsigned		*get_indice(size_t i)			{ return &indices[i]; }

		////////////////////////////////////////////////////////////
		/// \brief	GETTER de la cantidad de indices
		////////////////////////////////////////////////////////////
		int				 get_number_of_indices()		{ return number_of_indices; }

		////////////////////////////////////////////////////////////
		/// \brief	GETTER de la cantidad de vertices
		////////////////////////////////////////////////////////////
		int				 get_number_of_vertices()		{ return number_of_vertices; }




		////////////////////////////////////////////////////////////
		/// \brief	SETTER de las pocisiones de los vertices
		////////////////////////////////////////////////////////////
		void set_positions				(Point3f	position)			{ positions.push_back(position); }

		////////////////////////////////////////////////////////////
		/// \brief	SETTER de las normales
		////////////////////////////////////////////////////////////
		void set_normals				(Point3f	normal)				{ normals.push_back(normal); }

		////////////////////////////////////////////////////////////
		/// \brief	SETTER de los colores
		////////////////////////////////////////////////////////////
		void set_colors					(Point3f	color)				{ colors.push_back(color); }

		////////////////////////////////////////////////////////////
		/// \brief	SETTER de las coordenadas de textura
		////////////////////////////////////////////////////////////
		void set_texture_uvs			(Point2f	texture_uv)			{ texture_uvs.push_back(texture_uv); }

		////////////////////////////////////////////////////////////
		/// \brief	SETTER de los indices
		////////////////////////////////////////////////////////////
		void set_indices				(unsigned	indice)				{ indices.push_back(indice); }

		////////////////////////////////////////////////////////////
		/// \brief	SETTER de la cantidad total de indices
		////////////////////////////////////////////////////////////
		void set_number_of_indices		(int		num_indices)		{ number_of_indices = num_indices; }

		////////////////////////////////////////////////////////////
		/// \brief	SETTER de la cantidad total de vertices
		////////////////////////////////////////////////////////////
		void set_number_of_vertices		(int		num_vertices)		{ number_of_vertices = num_vertices; }
	};

}

#endif


